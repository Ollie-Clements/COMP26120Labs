package uk.ac.man.cs.eventlite.controllers;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import uk.ac.man.cs.eventlite.dao.VenueService;
import uk.ac.man.cs.eventlite.entities.Event;
import uk.ac.man.cs.eventlite.entities.Venue;
import uk.ac.man.cs.eventlite.exceptions.VenueNotFoundException;


@Controller
@RequestMapping(value = "/venues", produces = { MediaType.TEXT_HTML_VALUE })
public class VenuesController {
	@Autowired
	private VenueService venueService;

	@ExceptionHandler(VenueNotFoundException.class)
	@ResponseStatus(HttpStatus.NOT_FOUND)
	public String venueNotFoundHandler(VenueNotFoundException ex, Model model) {
		model.addAttribute("not_found_id", ex.getId());

		return "venues/not_found";
	}

	@GetMapping
	public String getAllVenues(Model model) {

		model.addAttribute("venues", venueService.findAll());

		return "venues/index";
	}

	@GetMapping("/{id}")
	public String getVenue(@PathVariable("id") long id, Model model) {

		ArrayList<Event> upcomingEvents = new ArrayList<>();
		ArrayList<Event> pastEvents = new ArrayList<>();


		Venue venue = venueService.findById(id).orElseThrow(() -> new VenueNotFoundException(id));
		model.addAttribute("venueDetails", venue);


		for(Event event:venue.getEvents()) {
			if (event.getDate().isAfter(LocalDate.now())) upcomingEvents.add(event);
		}
		for(Event event:venue.getEvents()) {
			if (event.getDate().isBefore(LocalDate.now())) pastEvents.add(event);
		}

		model.addAttribute("upcomingEvents", upcomingEvents);
		model.addAttribute("pastEvents", pastEvents);

		return "venues/detailed_venue";
	}
	
	@DeleteMapping("/{id}")
	public String deleteVenue(@PathVariable("id") long id) {
		venueService.deleteById(id);
		return "redirect:/venues";
	}

	@GetMapping("/newVenue")
	public String newVenue(Model model) {
		if (!model.containsAttribute("venue")) {
			model.addAttribute("venue", new Venue());
		}

		return "venues/newVenue";
	}
	@GetMapping("updateVenue/{id}")
	public String getEventToUpdate(@PathVariable("id") long id, Model model) {

		model.addAttribute("venue", venueService.findById(id));
		return "venues/update";
	}

	@PostMapping("updateVenue/{id}")
	public String updateVenue(@RequestParam("id") String id, @RequestParam("name") String name, @RequestParam("address") String address ,  @RequestParam("capacity") int capacity, @RequestParam("postcode") String postcode, Model model) {
		
		Venue v = venueService.findById(Long.parseLong(id)).get();

		v.setName(name);
		v.setAddress(address);
		v.setCapacity(capacity);
		v.setPostcode(postcode);
		for(Event e :v.getEvents()) {
			e.getVenue().setName(name);
		}
		venueService.save(v);
		
		return "redirect:/";
	}
	
	@PostMapping(path="/newVenue", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public String createVenue(@RequestBody @Valid @ModelAttribute Venue venue, BindingResult errors,
			Model model, RedirectAttributes redirectAttrs) throws IOException {

		if (errors.hasErrors()) {
			model.addAttribute("venue", venue);

			return "venues/newVenue";
		}
		venue.setLongitudeLatitude(venue.getAddress());	
		venueService.save(venue);
		
		redirectAttrs.addFlashAttribute("ok_message", "New venue added.");

		return "redirect:/venues";
	}
	
	@GetMapping("/VenueSearch")
	public String serachVenuesByName(@RequestParam("VenueSearch") String VenueSearch, Model model) {
		model.addAttribute("VenueSearch", venueService.findAllByNameContainingIgnoreCase(VenueSearch));

		return "venues/index";
	}
	
}
