package uk.ac.man.cs.eventlite.controllers;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.time.LocalDate;
import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.MediaTypes;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import uk.ac.man.cs.eventlite.assemblers.EventModelAssembler;
import uk.ac.man.cs.eventlite.assemblers.VenueModelAssembler;
import uk.ac.man.cs.eventlite.dao.EventService;
import uk.ac.man.cs.eventlite.dao.VenueService;
import uk.ac.man.cs.eventlite.entities.Event;
import uk.ac.man.cs.eventlite.entities.Venue;
import uk.ac.man.cs.eventlite.exceptions.EventNotFoundException;
import uk.ac.man.cs.eventlite.exceptions.VenueNotFoundException;



@RestController
@RequestMapping(value = "/api/venues", produces = { MediaType.APPLICATION_JSON_VALUE, MediaTypes.HAL_JSON_VALUE })
public class VenuesControllerApi {

	private static final String NOT_FOUND_MSG = "{ \"error\": \"%s\", \"id\": %d }";

	@Autowired
	private VenueService venueService;
	
	@Autowired
	private EventService eventService;

	@Autowired
	private VenueModelAssembler venueAssembler;
	
	@Autowired
	private EventModelAssembler eventAssembler;

	@ExceptionHandler(VenueNotFoundException.class)
	public ResponseEntity<?> venueNotFoundHandler(VenueNotFoundException ex) {
		return ResponseEntity.status(HttpStatus.NOT_FOUND)
				.body(String.format(NOT_FOUND_MSG, ex.getMessage(), ex.getId()));
	}

	@GetMapping("/{id}")
	public EntityModel<Venue> getVenue(@PathVariable("id") long id) {
		Venue venue = venueService.findById(id).orElse(null);
		if (venue == null) {
			throw new EventNotFoundException(id);
		}
		return venueAssembler.toModel(venue)
				.add(new Link("http://localhost:8080/api/venues/" + id + "/events", "events"))
				.add(new Link("http://localhost:8080/api/venues/" + id + "/next3events", "next3events"));
	}
	
	@GetMapping("/{id}/next3events")
	public CollectionModel<EntityModel<Event>> getNext3Event(@PathVariable("id") long id) {
		
		Venue venue = venueService.findById(id).orElse(null);
		
		if (venue == null) {
			throw new EventNotFoundException(id);
		}
		
		Iterable<Event> upcomingEvents = eventService.findAllByVenueIdOrderByDateAscTimeAsc(id);
		ArrayList<Event> next3Events = new ArrayList<>();
		for(Event e: upcomingEvents) {
			if (e.getDate().isAfter(LocalDate.now())) {
				next3Events.add(e);
			}
			if (next3Events.size() == 3) {
				break;
			}
		}
		
//		for(Event event:venue.getEvents()) {
//			if (event.getDate().isAfter(LocalDate.now())) upcomingEvents.add(event);
//		}
		
		
		return eventAssembler.toCollectionModel(next3Events);
		
		
//		return venueAssembler.toModel(venue);
	}

	@GetMapping
	public CollectionModel<EntityModel<Venue>> getAllVenues() {
		return venueAssembler.toCollectionModel(venueService.findAll())
				.add(linkTo(methodOn(VenuesControllerApi.class).getAllVenues()).withSelfRel())
				.add(new Link("http://localhost:8080/api/profile/venues", "profile"));
	}
	
	@GetMapping("/VenueSearch")
	public CollectionModel<EntityModel<Venue>> serachVenuesByName(@RequestParam("VenueSearch") String VenueSearch, Model model){
		return venueAssembler.toCollectionModel(venueService.findAllByNameContainingIgnoreCase(VenueSearch))
				.add(linkTo(methodOn(VenuesControllerApi.class).serachVenuesByName(VenueSearch, model)).withSelfRel());
	}
	
}
