package uk.ac.man.cs.eventlite.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;
import org.mockito.Mockito;

import uk.ac.man.cs.eventlite.EventLite;
import uk.ac.man.cs.eventlite.entities.Event;

@ExtendWith(SpringExtension.class)
@SpringBootTest(classes = EventLite.class)
@DirtiesContext
@ActiveProfiles("test")
public class EventServiceTest{

	@Autowired
	private EventService eventService;
	
	@Mock
	private EventRepository eventRepository;

	// This class is here as a starter for testing any custom methods within the
	// EventService. Note: It is currently @Disabled!
	
	@Test
	public void testCount() {
		Mockito.when(eventRepository.count()).thenReturn(0L);
		assertEquals(0, eventService.count());
	}
	
	@Test
	public void testSave() {
		Event event = new Event();
		event.setName("test");
		Mockito.when(eventRepository.save(event)).thenReturn(event);
		Event save = eventService.save(event);
		assertNotNull(save);
		assertEquals("test", save.getName());
	}
	
	@Test
	public void findAll() {
		Event event = new Event();
		Mockito.when(eventRepository.findByOrderByDateAscTimeAscNameAsc())
		.thenReturn(Arrays.asList(event));
		
		Iterable<Event> events = eventService.findAll();
		assertNotNull(events);
		assertEquals(1, ((List<Event>) events).size());
	}
	
	@Test
	public void findAllByVenueIdOrderByDateAscTimeAsc() {
		Event event = new Event();
		long id = 1L;
		Mockito.when(eventRepository.findAllByVenueIdOrderByDateAscTimeAsc(id))
		.thenReturn(Arrays.asList(event));
		
		Iterable<Event> events = eventService.findAll();
		assertNotNull(events);
		assertEquals(1, ((List<Event>) events).size());
	}
	
	@Test
	public void findById() {
		Optional<Event> event = Optional.ofNullable(new Event());
		long id = 1L;
		Mockito.when(eventRepository.findById(id))
		.thenReturn(event);
		
		Optional<Event> newEvent = eventService.findById(id);
		assertNotNull(newEvent);
		//assertEquals(event, newEvent);
	}
	
	
	
	
}
