package uk.ac.man.cs.eventlite.controllers;

import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import java.time.LocalDate;
import java.time.LocalTime;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;

import uk.ac.man.cs.eventlite.config.Security;
import uk.ac.man.cs.eventlite.dao.EventService;
import uk.ac.man.cs.eventlite.dao.VenueService;
import uk.ac.man.cs.eventlite.entities.Event;
import uk.ac.man.cs.eventlite.entities.Venue;

@ExtendWith(SpringExtension.class)
@WebMvcTest(VenuesController.class)
@Import(Security.class)
public class VenuesControllerTest {

	@Autowired
	private MockMvc mvc;

	@Mock
	private Event event;

	@Mock
	private Venue venue;

	@MockBean
	private EventService eventService;

	@MockBean
	private VenueService venueService;

// 	@Test
// 	public void getIndexWhenNoVenues() throws Exception {
// 		when(venueService.findAll()).thenReturn(Collections.<Venue>emptyList());
// //		when(venueService.findAll()).thenReturn(Collections.<Venue>emptyList());

// 		mvc.perform(get("/venues").accept(MediaType.TEXT_HTML)).andExpect(status().isOk())
// 				.andExpect(view().name("venues/index")).andExpect(handler().methodName("getAllVenues"));

// 		verify(venueService).findAll();
// //		verify(venueService).findAll();
// 		verifyNoInteractions(event);
// 		verifyNoInteractions(venue);
// 	}

// 	@Test
// 	public void getIndexWithVenues() throws Exception {
// 		when(venue.getName()).thenReturn("Kilburn Building");
// //		when(venueService.findAll()).thenReturn(Collections.<Venue>singletonList(venue));

// 		when(venueService.findAll()).thenReturn(Collections.<Venue>singletonList(venue));

// 		mvc.perform(get("/venues").accept(MediaType.TEXT_HTML)).andExpect(status().isOk())
// 				.andExpect(view().name("venues/index")).andExpect(handler().methodName("getAllVenues"));

// 		verify(venueService).findAll();
// //		verify(venueService).findAll();
// 	}

	@Test
	public void getVenueNotFound() throws Exception {
		mvc.perform(get("/venues/99").accept(MediaType.TEXT_HTML)).andExpect(status().isNotFound())
				.andExpect(view().name("venues/not_found")).andExpect(handler().methodName("getVenue"));
	}

	// test for specific venue 
	@Test
	public void getSpecificVenue() throws Exception {
		// this test is expected to fail
		mvc.perform(get("/venues/1").accept(MediaType.TEXT_HTML)).andExpect(status().isOk())
				.andExpect(view().name("venues/detailed_venue")).andExpect(handler().methodName("getVenue"));
	}
	
	// add Venue Test
	@Test
	public void addVenueTest() throws Exception{
		Venue venue = new Venue();
		venue.setName("Test venue");
		venue.setAddress("Test address");
		venue.setCapacity(1);
		venue.setLatitude(1);
		venue.setLongitude(1);
		venue.setPostcode("M13 9PL");
		

		venueService.save(venue);
		verify(venueService).save(venue);

		mvc.perform(get("/venues/newVenue").accept(MediaType.TEXT_HTML)).andExpect(status().isOk())
				.andExpect(view().name("venues/newVenue")).andExpect(handler().methodName("createVenue"));
	}
}
